* 顾比操作系统

  根据顾比均线，我们可以以此为依据选择股票的短期入场点和离场点。

** 顾比的进场线

   在顾比的系统中，通过顾比均线系统，可以用于发现趋势的转化，而在转化的过程中，如何寻找入场信号，就是进场线发挥作用的地方：

   #+BEGIN_QUOTE
   通过顾比复合均线关系或直边趋势线突破知道即将有这种信号发出。顾比倒数线确认了我们已知的信息。当趋势持续下跌的时候，我们从每一个价格新低重新计算倒数线。
   #+END_QUOTE

   在原理上，从最近的 *最低点* 开始分析。这个点是计算顾比倒数线的 *基线* K线A。以K线A的最高价为基础，向前（上一周期以往），可以找到第一根K线的最高价高于K线A的最高价的。这根K线就是 *重要K线B* 。 以重要K线B的最高价为准继续向前查找，又可以找到一条K线的最高价高于K线B的最高价。这根K线就是 *重要K线C* 。

   以 *重要K线C* 的最高价为准，向右（下一周期方向）划一条线。这条线就是顾比倒数线。

   注意，在顾比倒数线的计算过程中，使用的一直是 *最高价* ，而不是使用收盘价。

   当股票的有效价格（收盘价）有效突破顾比倒数线指示的位置时，即可认为出现了入场信号。可以考虑买入了。

** 顾比的离场线（止损线）

   顾比倒数线的应用还可以应用于进场后的止损。当应用于止损的时候，反向应用绘制顾比倒数线的方法，即 *以最低价为准* 进行重要K线的判断。

   具体方法如下：

   在原理上，从最近的 *最高点* 开始分析。这个点是计算顾比倒数线的 *基线* K线A。以K线A的最低价为基础，向前（上一周期以往），可以找到第一根K线的最低价低于K线A的最低价的。这根K线就是 *重要K线B* 。 以重要K线B的最低价为准继续向前查找，又可以找到一条K线的最低价低于K线B的最低价。这根K线就是 *重要K线C* 。

   以 *重要K线C* 的最低价为准，向右（下一周期方向）划一条线。这条线就是 *顾比倒数止损线* 。

   上面的计算方法看起来和计算顾比倒数线十分相似，关键就在于 *反向运算* 。


   在交易师的图线绘制过程中，我理解是从左向右绘制的。而且每一条绘图指令会单独进入循环，完成整个图线的绘制过程。

** 执行效果

   相关代码的执行效果如下：

     #+BEGIN_CENTER
     #+ATTR_HTML: :width 400px
     [[file:Images/Guppy-System-V1.png]]
     #+END_CENTER

* 源代码

  设置代码为“主图叠加”的绘制方式。
  
  #+BEGIN_SRC vbs :tangle yes
    #MainChart
  #+END_SRC

  定义公式参数。在参数的实现中，使用了波峰和波谷的识别系统函数。在该函数中需要设置参数，当波动超过该幅度时即认为出现了一个波峰/波谷。

  #+BEGIN_SRC vbs :tangle yes
    #TEMPLATE '最低价变动超过 Param#1 % 则确认趋势转折;'
    Input: N(5,1,60,0);
  #+END_SRC

  定义和初始化各类变量。变量的初始化非常重要，在未初始化的情况下，在切换股票的过程中可能会出现变量内容混乱的问题。

  * 使用Pos（TroughPos）代表所有我们发现的以最低价连线形成的波谷中前一个波谷的位置，即，序列中的值表示距离上一个波谷的位置。数据类型为 ~序列~ 。当标识为0时，说明该K线就是波谷本身
  * 使用PPos（Peak Pos）代表所有最高价连线形成的波峰序列。与Pos取值相对应的。PPos每一个元素取值均表示与上一个波峰的位置。
  * 使用 gd, gbg，表示入场线寻找过程中的 *重要K线B* 和 *重要K线C*。关于这两条K线的说明请参考顾比先生的《趋势交易大师》一书。
  * 使用 gld, glbg，表示止损线寻找过程中的 *重要K线B* 和 *重要k线C* 。
  * 为了划线方面，我们分别使用GPBInd/GPCInd表示入场线中K线B和K线C的标记。使用GPBLInd和GPCLInd表示止损线中的K线B和K线C的标记。

  #+BEGIN_SRC vbs :tangle yes
    Pos:=TroughBars(Low,N,1);
    PPos:=PeakBars(High, N, 1);
    Variables: hh(High),TroughPos(Pos), ll(Low), PeakPos(PPos),
            NumericSeries gd(0),
            NumericSeries gbg(0),
            NumericSeries gld(0),
            NumericSeries glbg(0),
            NumericSeries GPBInd(0),
            NumericSeries GPCInd(0),
            NumericSeries GPBLInd(0),
            NumericSeries GPCLInd(0);  
  #+END_SRC

  对于每一只股票，我们都需要遍历该股票的所有数据，因此我们需要设计一个循环，在这个循环中找出所有的高低点信息。

  #+BEGIN_SRC vbs :tangle yes
    for i=0 to DataCount-1 do
    begin  
  #+END_SRC
  
** 顾比倒数发现买入位置

   开始进行顾比入场线的计算。使用单独的变量记录日最高价，方便在循环中使用。

   #+BEGIN_SRC vbs :tangle yes
     VARIABLE: hh:=High;
   #+END_SRC

   在交易师软件中，当前周期使用数组下标 ~0~ 表示。最老的一个周期的数组下标由系统常数 ~DataCount~ 表示。因此最老的一根K线的数组下标应该是 ~DataCount-1~ 。

   下面的循环中，针对历史上的每一条K线，我们都当作 *重要K线A* 寻找重要K线B和C。在后续画线过程中再确定是否需要启用。

   在循环中：

   * 第一层循环用于遍历所有的K线数组（使用变量i作为数组下标）
   * 第二层中的第一个循环在第i个数组对象后寻找第一个最高价高于当前周期的K线（使用变量J作为数组下标）。
     + 使用数组型变量 ~gd~ 来记录每一根K线对应的 重要K线B 的位置。
     + 完成该循环时，如果找到了这根K线，则将距离当前周期（i周期）的相对位置记录在数组变量中( ~j-i~ )。如果没有找到，则相对位置就是剩余K线的数量（相当于DataCount-1-i）。
   * 第二层中的第二个循环针对第i个数组对象寻找下一个最高价高于当前周期的K线（使用变量k作为数组下标）。同样记录数组位置。

   #+BEGIN_SRC vbs :tangle yes
     for i=0 to DataCount-1 do
     begin
             for j=i to DataCount-1 do
             begin
                     if hh[j]>hh[i] then break;
             end
             gd[i]:=j-i;
             
             for k=j to DataCount-1 Do
             Begin
                     if hh[k]>hh[j] Then break;
             End
             gbG[i]:=k-i;
     end
   #+END_SRC

   绘制入场线（RCX：入场线的拼音首字母）。绘制过程中，使用LlvBars查找当前周期是否为短期内的最低价。如果是，则该周期为顾比重要K线A。如果不是，那么就忽略该K线。

   如果计算得到的入场价格向后持续了两个周期以上，那么在当前周期位置做标记，说明计算该价格的基础K线就（重要K线A）。

   当K线有效站上入场线时发出买入信号（笑脸）。

   #+BEGIN_SRC vbs :tangle yes
     RCX:ValueWhen(LlvBars(Low,gbG+1)=0,ref(High,gbG)),ColorRed;
     DrawIcon(LlvBars(Low,gbG+1)=0 And RCX=RefX(RCX,1), Low, 4);
     DrawIcon(LongCross(C, RCX, 1), Low, 1), Pxdn2;
   #+END_SRC

** 顾比倒数止损线

   按照上面的方法计算和绘制止损线。

   #+BEGIN_SRC vbs :tangle yes
     VARIABLE: ll:=Low;
     for i=0 to DataCount-1 do
     begin
             for j=i to DataCount-1 do
             begin
                     if ll[j]<ll[i] then break;
             end
             gld[i]:=j-i;
             
             for k=j to DataCount-1 Do
             Begin
                     if ll[k]<ll[j] Then break;
             End
             glbG[i]:=k-i;
     end
     CCX:ValueWhen(hhvBars(High,glbG+1)=0,ref(Low,glbG)),ColorGreen;
     DrawIcon(HhvBars(High,glbG+1)=0 And CCX=RefX(CCX,1), High, 5),Pxup13, ColorGreen; 
   #+END_SRC

** 最大追涨线

   顾比倒数的系统中，还可以用于确定相对安全的追涨买入范围。其基本原理是在计算出顾比倒数线之后以重要K线A的低点与顾比倒数线的距离为向上看到同样的距离即为最大追涨价格。

   对于最大追涨价格来说，在出现了一个基准价格之后就可以确认了。图线中，基准K线前显示的最大追涨价格无效。暂时请勿使用。

   不过问题是为什么要用相同的比例而不是价格呢？两者间存在一点点微小的差异啊！

   #+BEGIN_SRC vbs :tangle yes
     ZZX:RCX*(1+((RCX-ValueWhen(Pos=0,Low))/ValueWhen(Pos-0,Low))),ColorGray,NoDraw;
   #+END_SRC
   
* 变更日志

  * V0.0.1：
    + 完成了第一个版本的顾比倒数线的绘制功能。
    + 在实现上关注功能的实现，在性能上未作优化。
    + 添加执行效果抓图
